[
    {
        "id": "0008e9e2-bc76-b79e-c235-18ec009a53d9",
        "name": "Kronos Time",
        "query": "/******************************\n**  Ticke#:\n**  Name: Digital Med - Team Member Kronos Time\n**  Requested By: Rebecca Arriaga\n**  Description: This query pulls in the time/days worked and taken off from Kronos\n**  Author: Jackson Wilde\n**  Date: 03.21.2023\n\n\n\n\n*******************************\n**  Change History\n*******************************\n**  Version   Date              Author            Description\n**  -------   --------          ------------      ----------------------------------\n**  1         03.21.2023        Jackson Wilde     V1: Created\n**  2         04.11.2023        Jackson Wilde     V2: Updated to use the WFCTOTAL table based on information recieved from Peter Thompson about the Kronos data structure.\n**  3         04.12.2023        Jackson Wilde     V3: Removed unecessary joins and limited query to only pulling in the REG-Regular paycode since this should already account for time off.\n**  4         08.15.2023        Aili Zhou         V4: Changed Days_Worked logic to count days with less than 5 hours worked as half days\n**  5         10.20.2023        Aili Zhou         V5: Added Paycode 137 to include over time hours, per Leigh Crabtree's request\n*******************************/\n\nSELECT\ntot.EMPLOYEEID\n,prs.PERSONNUM\n,tot.ADJAPPLYDTM            SHIFT_DATE\n,MIN(tot.STARTDTM)          SHIFT_START_DT\n,MAX(tot.ENDDTM)            SHIFT_END_DT\n--,LEAD(tot.ADJAPPLYDTM, 1) OVER(PARTITION BY tot.EMPLOYEEID ORDER BY tot.ADJAPPLYDTM)    TIME_SHEET_END_DATE \n--,tot.APPLYDTM               TIME_POSTED_DATE\n--,pc.NAME                    PAY_CODE_NAME\n--,tot.PAYCODEID\n,SUM(tot.DURATIONSECSQTY/3600)      HOURS_WORKED --Already accounts for time off.\n,COUNT(DISTINCT(tot.ADJAPPLYDTM))   DAYS_WORKED_2 --old logic\n,case when SUM(tot.DURATIONSECSQTY/3600) <=5 then 0.5*COUNT(DISTINCT(tot.ADJAPPLYDTM))\nwhen SUM(tot.DURATIONSECSQTY/3600)>5 then 1*COUNT(DISTINCT(tot.ADJAPPLYDTM))\nEND AS DAYS_WORKED --New Logic Requested by Care Team\n\n\n\n        FROM\n        WFCTOTAL tot\n        INNER JOIN PAYCODE pc ON tot.PAYCODEID = pc.PAYCODEID\n        INNER JOIN JAIDS emp ON tot.EMPLOYEEID = emp.EMPLOYEEID\n        INNER JOIN PERSON prs on emp.PERSONID = prs.PERSONID\n        INNER JOIN WTKEMPLOYEE sup ON tot.EMPLOYEEID = sup.WTKEMPLOYEEID\n\n\n\n\n        WHERE\n        tot.PAYCODEID IN  (141/*REG-REGULAR*/, 137 /*OVERTIME*/) --Using this criteria so that the only time included is actual time worked.\n        AND \n        tot.ADJAPPLYDTM BETWEEN ADD_MONTHS(TRUNC(SYSDATE, 'YYYY'), -24) AND TRUNC(SYSDATE)-1\n        AND tot.APPLYDTM/*post date*/ = tot.ADJAPPLYDTM/*shift date*/ \n        AND pc.TYPE = 'P'/*PAYCODE TYPE*/\n        AND sup.SUPERVISORID IN (73793/*Rebecca Arriaga*/, 38559/*Val Williams*/, 56679/*Leigh Crabtree*/, 70931/*Danny Mack*/, 33621/*Heather Aaron*/, 37176/*Heather Pattison*/, 67137/*Adrian Hawley*/) --This criteria will need to be updated to reference a department or cost center long term.\n        --AND tot.EMPLOYEEID = 142420 --97059/*IAN HATLEE*/ \n        --AND prs.PERSONNUM = '1033688'\n        --AND pm.EFFECTIVEDTM <= tot.APPLYDTM\n        --AND pm.EXPIRATIONDTM > tot.APPLYDTM\n\n\n\n\n        GROUP BY\n        tot.EMPLOYEEID\n        ,prs.PERSONNUM\n        ,tot.ADJAPPLYDTM\n\n\n        ORDER BY\n        tot.EMPLOYEEID\n        ,tot.ADJAPPLYDTM",
        "downstreamDatasources": [
            {
                "luid": "a0e27cdd-bfee-4527-938b-f6ef189f9f87",
                "name": "Digital Med - Team Member Phone Stats V2 DS",
                "projectName": "Digital Med - Care/Support Team Data Sources DEV"
            }
        ],
        "downstreamWorkbooks": [
            {
                "luid": "9c79c71c-fcb0-405b-836b-22871587865b",
                "name": "Digital Med - Care Team and Support Team Scorecard",
                "projectName": "Digital Medicine Operations *Internal* PROD"
            },
            {
                "luid": "6df99cbd-09e6-4b5b-ae86-5bd7714e0fb5",
                "name": "Digital Med - Care Team and Support Team Scorecard",
                "projectName": "Digital Medicine DEV"
            }
        ]
    },
    {
        "id": "00224c0e-9faa-4fc3-f279-19b855d07995",
        "name": "Custom SQL Query",
        "query": "SELECT \r\n\r\n  \"_users\".\"id\" AS \"_users_id\",\r\n  upper(\"_users\".\"name\") AS \"_users_name\",\r\n  \"_users\".\"login_at\" AS \"login_at\",\r\n  \"_users\".\"friendly_name\" AS \"friendly_name\",\r\n  \"_users\".\"domain_id\" AS \"domain_id\",\r\n  \"_users\".\"system_user_id\" AS \"_users_system_user_id\",\r\n  \"_users\".\"domain_name\" AS \"_users_domain_name\",\r\n  \"_users\".\"domain_short_name\" AS \"domain_short_name\",\r\n  \"_users\".\"site_id\" AS \"_users_site_id\",\r\n   si.name as Site_Name,\r\n  users.site_role_id,\r\n  case when _system_users.admin_level = '10' then '10000000'\r\n  else  sr.licensing_rank end as licensing_rank,\r\n  case when _system_users.admin_level = '10' then 'System Admin'\r\n  else  sr.display_name end as \"Site Role\"\r\n  \r\nFROM \"public\".\"_users\" \"_users\"\r\n--8461\r\ninner join users\r\non \"users\".\"system_user_id\" = \"_users\".\"system_user_id\"\r\nand \"users\".\"site_id\" = \"_users\".\"site_id\"\r\nleft join site_roles sr\r\non users.site_role_id = sr.id\r\nleft join sites si\r\non users.site_id = si.id\r\nleft join _system_users\r\non \"users\".\"system_user_id\" = \"_system_users\".\"id\" \r\nwhere \"_users\".\"name\" not in ('_system','guest','svc.tabrunas')",
        "downstreamDatasources": [],
        "downstreamWorkbooks": [
            {
                "luid": "ff30a1fa-abd9-44ea-9382-c6dd1335da27",
                "name": "Custom Server Admin Views",
                "projectName": "Administrative Views DEV"
            }
        ]
    },
    {
        "id": "0065d4ea-348f-60db-6122-4d5227f11d3b",
        "name": "Custom SQL Query",
        "query": "select i.*, T.PHONE_CALL_TYPE_DESC \r\nfrom analytics.phone_call_type_intervals i\r\nleft join analytics.phone_call_types t on i.phone_call_type_id = t.phone_call_type_id\r\nwhere i.phone_call_type_id in (1747, 1775, 1774, 1739, 1740, 1741, 1742, 1743, 1744, 1745, 1746, 1748\r\n                              , 2583, 2584, 2585, 2586) --starting with 2's added in 2020\r\nand T.PHONE_CALL_TYPE_DESC is not null\r\nand interval_start_date_id >= 20220101",
        "downstreamDatasources": [],
        "downstreamWorkbooks": [
            {
                "luid": "95205c7a-3799-4bef-a308-5c9cacbb4cb4",
                "name": "z_bup : URAC as of 042324 (prior to cleanup)",
                "projectName": "SK - DEV"
            }
        ]
    },
    {
        "id": "00b90710-88ea-4e18-f0c6-9d38562226a6",
        "name": "Custom SQL Query",
        "query": "SELECT\r\nCT.EnterpriseName,\r\nCT.CallTypeID ,\r\nCONVERT(DATETIME,Convert(Date,CTI.DateTime)) as Call_Date ,\r\nCONVERT(DATETIME, CONVERT(VARCHAR(13), CTI.DateTime, 120) + ':00:00') as Call_StartDate_Hour,\t\r\nSum(ISNULL(CTI.CallsHandled,0))  as CallsHandled,\r\nSum(ISNULL(CTI.CallsOffered,0)) as CallsOffered,\r\nSum(ISNULL(CTI.CallsAnswered,0)) as CallsAnswered,\r\nSum(ISNULL(CTI.TotalCallsAband,0)) as CallsAbandoned,\r\nSum(ISNULL(CTI.CallsRONA,0)) as CallsRONA,\r\nsum(isnull(CTI.RouterQueueWaitTime,0)) as RouterQueueWaitTime,\r\nsum(isnull(CTI.RouterQueueCalls,0)) as RouterQueueCalls,\r\nsum(isnull(CTI.MaxCallWaitTime,0)) as MaxCallWaitTime,\r\nsum(isnull(CTI.HandleTime,0)) as HandleTime,\r\nsum(isnull(CTI.CallsRouted,0)) as CallsRouted,\r\nsum(isnull(CTI.MaxCallsQueued,0)) as MaxCallsQueued,\r\nsum(isnull(CTI.MaxHoldTime,0)) as MaxHoldTime,\r\nsum(isnull(CTI.ReturnBusy,0))  as ReturnBusy,\r\nsum(isnull(CTI.AnswerWaitTime,0))  as AnswerWaitTime\r\nFROM Call_Type CT\r\nJOIN Call_Type_Interval CTI  ON CT.CallTypeID = CTI.CallTypeID\r\n\r\nWHERE\r\n     CTI.DateTime >= '2024-05-01' \r\n\t AND \r\n\r\n\t  CT.CallTypeID IN (\r\n--5088, -- OPT 1 replace with 5123\r\n5123, \r\n--5089, --OPT4 and OPT2 replace with 5072. \r\n10084, -- Work number OPT 3 (newly created today)\r\n5072, -- payroll \r\n10085, -- New Payroll (newly created today)\r\n5090,\r\n--5091,\r\n--5092, -- OPT 5 (leader line) replace with 10083\r\n10083, \r\n6943,\r\n7304,\r\n7305,\r\n7306,\r\n5080,\r\n5120, --this is OPT 6\r\n5121 -- voicemail\r\n)\r\ngroup by \r\nCT.EnterpriseName,\r\nCT.CallTypeID,\r\nCONVERT(DATETIME,Convert(Date,CTI.DateTime)),\r\nCONVERT(DATETIME, CONVERT(VARCHAR(13), CTI.DateTime, 120) + ':00:00')",
        "downstreamDatasources": [],
        "downstreamWorkbooks": [
            {
                "luid": "b59b24d9-1a9e-4ded-8df0-0a2621a4cca0",
                "name": "HR Connect Call Stats",
                "projectName": "HR Connect PROD"
            }
        ]
    },
    {
        "id": "00dc0bbe-fc72-ff24-3f21-d678b0faa948",
        "name": "BPA Response Rate",
        "query": "/*\nPurpose:\n  This script is the data source for the Tableau workbook Connnected MOM - Program Offer Rates by Provider.\n  OB wants to see all of their providers listed in the dashboard, whether they are particpating in the\n  Connected MOM program or not.  So a list of all OB providers with their participation status is left \n  joined to data about OB visits.\nAuthor: Kent Boyer\nLast Updated: 11/12/2021\n*/\nWITH\nOB_Providers as\n(\n  SELECT \n      ser.PROV_NAME \"Provider\"\n      ,prov_type.NAME as \"Provider Type\"\n      ,ser.PROV_ID\n      ,dep.DEPARTMENT_NAME \"Provider Primary Department\"\n      ,dep.GL_PREFIX as \"Provider Cost Center\"\n      ,loc.LOC_NAME as \"Provider Primary Location\"\n      ,sa.SERV_AREA_NAME \"Service Area\"      \n      ,case when x_emp.DM_PROGRAMS_C = 3 then 'Y' else 'N' end \"Participating\"\n  FROM    \n      CLARITY_EMP emp\n  INNER JOIN\n      CLARITY_SER ser on emp.PROV_ID = ser.PROV_ID\n                      and ser.PROV_TYPE in ('Physician','Midwife','Nurse Practitioner','Resident','Physician Assistant')\n  INNER JOIN \n      CLARITY_SER_2 ser2 on ser.PROV_ID = ser2.PROV_ID\n  INNER JOIN\n      CLARITY_DEP dep on ser2.PRIMARY_DEPT_ID = dep.DEPARTMENT_ID\n  INNER JOIN\n      CLARITY_LOC loc on dep.REV_LOC_ID = loc.LOC_ID\n  INNER JOIN \n      ZC_PROV_TYPE prov_type on ser.PROVIDER_TYPE_C = prov_type.PROV_TYPE_C\n  LEFT JOIN\n      X_EMP_DIGMED_ENROLL_PROG x_emp on emp.USER_ID = x_emp.USER_NUMBER_ID and x_emp.DM_PROGRAMS_C = 3\n  LEFT JOIN\n      CLARITY_SA sa on dep.SERV_AREA_ID = sa.SERV_AREA_ID\n  WHERE 1 = 1\n      and dep.SPECIALTY in ('Obstetrics and Gynecology','Obstetrics')\n      --and dep.SERV_AREA_ID = 10\n      and ser.ACTIVE_STATUS = 'Active'\n      and emp.USER_STATUS_C = 1\n      and emp.PROV_ID is not NULL\n  GROUP BY\n      ser.PROV_NAME\n      ,prov_type.NAME\n      ,ser.PROV_ID\n      ,dep.DEPARTMENT_NAME\n      ,dep.GL_PREFIX\n      ,loc.LOC_NAME\n      ,sa.SERV_AREA_NAME\n      ,case when x_emp.DM_PROGRAMS_C = 3 then 'Y' else 'N' end\n\n)\n--select count(*) from OB_Providers; --4.2 sec\n,programs as\n\t(\n\tSELECT \n\t\t'Connected MOM' as \"Program\" \n\t\t,4021 as \"Eligibility Alert ID\"\n\t\t,108795 as \"Enrollment Order ID\"\n\tFROM DUAL\n\t)\n\n,pregnancies as\n/* ********************************************************\npregnancies - One row per pregnancy episode\n********************************************************* */\n( \n  SELECT\n      hsb_pregnancy.EPISODE_ID as \"Pregnancy Episode ID\"\n      ,hsb_pregnancy.PAT_LINK_ID as \"Mother EPT\"\n      ,hsb_pregnancy.START_DATE as \"Pregnancy Episode Start\"\n      ,hsb_pregnancy.END_DATE as \"Pregnancy Episode End\"\n      ,case \n          When Hsb_Pregnancy_2.Ob_Delivery_Date Is Not Null Then Hsb_Pregnancy_2.Ob_Delivery_Date\n          when hsb_pregnancy_2.OB_DELIVERY_DATE is null and hsb_delivery_2.OB_DEL_BIRTH_DTTM is not NULL then EPIC_UTIL.EFN_UTC_TO_LOCAL(hsb_delivery_2.OB_DEL_BIRTH_DTTM)\n          when hsb_pregnancy_2.OB_DELIVERY_DATE is null and hsb_delivery_2.OB_DEL_BIRTH_DTTM is null and delivery_admit.HOSP_ADMSN_TIME is not NULL then delivery_admit.HOSP_ADMSN_TIME\n      end as \"Delivery Date\"\n      --Determine date of conception\n      ,case\n          --Simplify the logic by coalescing hsb_pregnancy_2.OB_DELIVERY_DATE,hsb_delivery_2.OB_DEL_BIRTH_DTTM and delivery_admit.HOSP_ADMSN_TIME\n          -- We know the delivery date \n          when coalesce(hsb_pregnancy_2.OB_DELIVERY_DATE,EPIC_UTIL.EFN_UTC_TO_LOCAL(hsb_delivery_2.OB_DEL_BIRTH_DTTM),delivery_admit.HOSP_ADMSN_TIME) is not NULL\n              then COALESCE(hsb_pregnancy_2.OB_DELIVERY_DATE,EPIC_UTIL.EFN_UTC_TO_LOCAL(hsb_delivery_2.OB_DEL_BIRTH_DTTM),delivery_admit.HOSP_ADMSN_TIME) - COALESCE(hsb_delivery_2.OB_HX_GEST_AGE,  (40*7))\n          -- We don't know the delivery date\n          when coalesce(hsb_pregnancy_2.OB_DELIVERY_DATE,EPIC_UTIL.EFN_UTC_TO_LOCAL(hsb_delivery_2.OB_DEL_BIRTH_DTTM),delivery_admit.HOSP_ADMSN_TIME) is NULL then\n              case\n                  --We know the working delivery date \n                  when hsb_pregnancy.OB_WRK_EDD_DT is not NULL \n                    then hsb_pregnancy.OB_WRK_EDD_DT - (40*7) -- We will estimate based on normal pregnancy length\n                  --We don't know either the delivery date or the working delivery date. We got nothing.\n                  else NULL\n          end\n      end \"Date of Conception\"\n      ,ser_ob.PROV_ID as \"Linked Obstetrician ID\"\n  FROM\n    EPISODE hsb_pregnancy\n    LEFT JOIN EPISODE hsb_delivery on hsb_pregnancy.EPISODE_ID = hsb_delivery.OB_DEL_PREG_EPI_ID\n    LEFT JOIN OB_HSB_DELIVERY hsb_pregnancy_2 on hsb_delivery.EPISODE_ID = hsb_pregnancy_2.SUMMARY_BLOCK_ID --This is mom's delivery record\n    LEFT JOIN OB_HSB_DELIVERY hsb_delivery_2 on hsb_delivery.EPISODE_ID = hsb_delivery_2.SUMMARY_BLOCK_ID -- This is baby's delivery record\n    --In case both hsb_pregnancy_2.OB_DELIVERY_DATE and hsb_delivery_2.OB_DEL_BIRTH_DTTM are null\n    LEFT JOIN PAT_ENC_HSP delivery_admit on hsb_pregnancy_2.DELIVERY_DATE_CSN = delivery_admit.PAT_ENC_CSN_ID\n    LEFT JOIN EPSD_CARE_PROVIDER hsb_pregnancy_lnkd_prov on hsb_pregnancy.EPISODE_ID = hsb_pregnancy_lnkd_prov.SUMMARY_BLOCK_ID\n      and hsb_pregnancy_lnkd_prov.LINE = 1\n      and hsb_pregnancy_lnkd_prov.CARE_ROLE_C = 6 -- Obstetrician  [6]\n    LEFT JOIN CLARITY_SER ser_ob on hsb_pregnancy_lnkd_prov.CARE_PROVIDER_ID = ser_ob.PROV_ID\n    INNER JOIN PATIENT pt on hsb_pregnancy.PAT_LINK_ID  = pt.PAT_ID\n  WHERE\n    1 = 1\n    --and pt.PAT_MRN_ID\t= '10063864'\t -------- Sample MRN\n    and hsb_pregnancy.START_DATE >= date '2016-11-01' -- Start of Connected MOM\n    and hsb_pregnancy.SUM_BLK_TYPE_ID = 2 -- PREGNANCY [2]\n      and (hsb_delivery.SUM_BLK_TYPE_ID = 14 or hsb_delivery.SUM_BLK_TYPE_ID is null) -- DELIVERY [14]\n    and hsb_pregnancy.STATUS_C <> 3 -- Deleted [3]\n    --Found an episode with the same start and end date along with another one with same start date for same patient\n    --Apparently user decided there was something amiss with the first episode and resolved it instead of deleteing it\n    and hsb_pregnancy.START_DATE < nvl(hsb_pregnancy.END_DATE,trunc(SYSDATE))\n    --and hsb_pregnancy.PAT_LINK_ID = :EPT\n    --and hsb_pregnancy.EPISODE_ID = :HSB\n  GROUP BY\n      hsb_pregnancy.EPISODE_ID\n      ,hsb_pregnancy.PAT_LINK_ID\n      ,hsb_pregnancy.START_DATE\n      ,hsb_pregnancy.END_DATE\n      ,case \n          When Hsb_Pregnancy_2.Ob_Delivery_Date Is Not Null Then Hsb_Pregnancy_2.Ob_Delivery_Date\n          when hsb_pregnancy_2.OB_DELIVERY_DATE is null and hsb_delivery_2.OB_DEL_BIRTH_DTTM is not NULL then EPIC_UTIL.EFN_UTC_TO_LOCAL(hsb_delivery_2.OB_DEL_BIRTH_DTTM)\n          when hsb_pregnancy_2.OB_DELIVERY_DATE is null and hsb_delivery_2.OB_DEL_BIRTH_DTTM is null and delivery_admit.HOSP_ADMSN_TIME is not NULL then delivery_admit.HOSP_ADMSN_TIME\n      end\n      --Determine date of conception\n      ,case\n          --Simplify the logic by coalescing hsb_pregnancy_2.OB_DELIVERY_DATE,hsb_delivery_2.OB_DEL_BIRTH_DTTM and delivery_admit.HOSP_ADMSN_TIME\n          -- We know the delivery date \n          when coalesce(hsb_pregnancy_2.OB_DELIVERY_DATE,EPIC_UTIL.EFN_UTC_TO_LOCAL(hsb_delivery_2.OB_DEL_BIRTH_DTTM),delivery_admit.HOSP_ADMSN_TIME) is not NULL\n              then COALESCE(hsb_pregnancy_2.OB_DELIVERY_DATE,EPIC_UTIL.EFN_UTC_TO_LOCAL(hsb_delivery_2.OB_DEL_BIRTH_DTTM),delivery_admit.HOSP_ADMSN_TIME) - COALESCE(hsb_delivery_2.OB_HX_GEST_AGE,  (40*7))\n          -- We don't know the delivery date\n          when coalesce(hsb_pregnancy_2.OB_DELIVERY_DATE,EPIC_UTIL.EFN_UTC_TO_LOCAL(hsb_delivery_2.OB_DEL_BIRTH_DTTM),delivery_admit.HOSP_ADMSN_TIME) is NULL then\n              case\n                  --We know the working delivery date \n                  when hsb_pregnancy.OB_WRK_EDD_DT is not NULL \n                    then hsb_pregnancy.OB_WRK_EDD_DT - (40*7) -- We will estimate based on normal pregnancy length\n                  --We don't know either the delivery date or the working delivery date. We got nothing.\n                  else NULL\n          end\n      end \n      ,ser_ob.PROV_ID\n  \n)\n--select * from pregnancies;\n--select count(*) from pregnancies; --28 sec/ 76,145 records/65,844 distinct EPT\n\n,Prenatal_Encounters as\n(\n/* ************************************************************************************\nReturns set of Prenatal encounters and associated information occuring within an episodes start and end dates\n************************************************************************************ */\n    SELECT\n       pregnancies.\"Pregnancy Episode ID\"\n      ,enc.PAT_ENC_CSN_ID\n      ,enc.CONTACT_DATE \"Prenatal Encounter Date\"\n      ,enc.ENC_TYPE_C \"Encounter Type\"\n      ,ty.NAME \"Encounter Type Name\"\n      ,enc.DEPARTMENT_ID as \"Encounter Department ID\"\n      ,dep.DEPARTMENT_NAME as \"Encounter Department Name\"\n      ,enc.BP_SYSTOLIC \"Systolic\"\n      ,enc.BP_DIASTOLIC \"Diastolic\"\n      ,enc.WEIGHT \"Weight\"\n      ,coverage.PAYOR_ID \"Payor ID\"\n      ,epm.PAYOR_NAME \"Payor Name\"\n      ,coverage.PLAN_ID \"Plan\"\n      ,epm.FINANCIAL_CLASS \"Financial Class\"\n      ,fc.FINANCIAL_CLASS_NAME \"Financial Class Name\"\n      ,ROW_NUMBER() OVER (PARTITION BY pregnancies.\"Pregnancy Episode ID\" ORDER BY enc.CONTACT_DATE ASC) \"Row_Asc\"\n      ,ROW_NUMBER() OVER (PARTITION BY pregnancies.\"Pregnancy Episode ID\" ORDER BY enc.CONTACT_DATE DESC) \"Row_Desc\"\n    FROM\n      pregnancies\n      INNER JOIN PAT_ENC enc on pregnancies.\"Mother EPT\" = enc.PAT_ID\n        and enc.CONTACT_DATE >= pregnancies.\"Date of Conception\"\n        -- and enc.CONTACT_DATE <= pregnancies.\"Delivery Date\"\n        and enc.CONTACT_DATE <= coalesce(pregnancies.\"Delivery Date\",pregnancies.\"Pregnancy Episode End\",trunc(SYSDATE) - 1)\n        and enc.ENC_TYPE_C IN (1200,1201) -- Initial Prenatal [1201]; Routine Prenatal [1200]\n        and enc.APPT_STATUS_C = 2 -- Completed\n      LEFT JOIN COVERAGE coverage on enc.COVERAGE_ID = coverage.COVERAGE_ID   \n      LEFT JOIN CLARITY_EPM epm on coverage.PAYOR_ID = epm.PAYOR_ID\n      LEFT JOIN CLARITY_FC fc ON epm.FINANCIAL_CLASS = fc.FINANCIAL_CLASS\n      LEFT JOIN ZC_DISP_ENC_TYPE ty ON enc.ENC_TYPE_C = ty.DISP_ENC_TYPE_C\n      LEFT JOIN CLARITY_DEP dep ON enc.DEPARTMENT_ID = dep.DEPARTMENT_ID\n)\n\n\n,most_seen_ob as\n(\n/* *************************************************************************\n  One row per patient \n  This was added to handle cases where the patient is not linked with an OB Provider in Epic.\n  It counts the number of prenatal visits with a physician or nurse midwife whose speciality\n  is OB or OB/GYN and selects the provider with the most visits as the \"inferred\" obstetrician\n************************************************************************* */\n  SELECT\n    PAT_ID\n    ,PROV_ID\n    ,\"Inferred Obstetrician\"\n    ,\"Inferred Ob Department\"\n    ,\"Inferred Ob Location\"\n    ,\"OB License Type\"\n    ,\"Pregnancy Episode ID\"\n    ,\"Linked Obstetrician ID\"\n    ,\"First Visit\"\n    ,\"Last Visit\"\n    ,\"Total Visits\" as \"Visits with this OB\"\n  FROM\n  (\n    SELECT\n      PAT_ID\n      ,PROV_ID\n      ,\"Inferred Obstetrician\"\n      ,\"Inferred Ob Department\"\n      ,\"Inferred Ob Location\"\n      ,\"OB License Type\"\n      ,\"Pregnancy Episode ID\"\n      ,\"Linked Obstetrician ID\"\n      ,\"First Visit\"\n      ,\"Last Visit\"\n      ,\"Total Visits\"\n      ,row_number() over (partition by PAT_ID,\"Pregnancy Episode ID\" order by \"Total Visits\" desc) as rowno\n    FROM\n    (\n    SELECT DISTINCT\n        visits.PAT_ID\n        ,ser.PROV_ID\n        ,ser.PROV_NAME \"Inferred Obstetrician\"\n        ,dep.DEPARTMENT_NAME \"Inferred Ob Department\"\n        ,loc.LOC_NAME \"Inferred Ob Location\"\n        ,lic.LICENSE_TYPE \"OB License Type\"\n        ,visits.\"Pregnancy Episode ID\" \n        ,visits.\"Linked Obstetrician ID\"\n        ,min(CONTACT_DATE) \"First Visit\"\n        ,max(CONTACT_DATE) \"Last Visit\"\n        ,count(distinct PAT_ENC_CSN_ID) as \"Total Visits\"\n    FROM    \n    (\n        SELECT DISTINCT\n          pregnancies.\"Pregnancy Episode ID\" \n          ,pregnancies.\"Linked Obstetrician ID\"\n          ,enc.PAT_ID\n          ,enc.PAT_ENC_CSN_ID\n          ,enc.VISIT_PROV_ID\n          ,enc.CONTACT_DATE \n        FROM\n          pregnancies\n          INNER JOIN PAT_ENC enc on pregnancies.\"Mother EPT\" = enc.PAT_ID\n            and enc.CONTACT_DATE >= pregnancies.\"Date of Conception\"\n            and enc.CONTACT_DATE <= nvl(pregnancies.\"Delivery Date\",trunc(SYSDATE) - 1)\n            and enc.ENC_TYPE_C in (1200,1201) -- Routine and Initial Prenatal Encounter Types\n            and enc.APPT_STATUS_C = 2 -- Completed\n          INNER JOIN CLARITY_DEP dep on enc.DEPARTMENT_ID = dep.DEPARTMENT_ID\n          INNER JOIN CLARITY_SER ser on enc.VISIT_PROV_ID = ser.PROV_ID\n        WHERE\n          enc.CONTACT_DATE >= date '2016-11-01' -- Start of Connected MOM\n--and pregnancies.\"Pregnancy Episode ID\" = :HSB\n--and (pregnancies.\"Mother EPT\" = :EPT or :EPT is NULL)\n    ) visits \n    INNER JOIN\n        Clarity_Ser Ser On Visits.Visit_Prov_Id = Ser.Prov_Id\n                        and upper(ser.PROV_TYPE) in ('PHYSICIAN','MIDWIFE')\n    INNER JOIN \n        CLARITY_SER_LICEN2 lic on ser.PROV_ID = lic.PROV_ID\n    INNER JOIN \n        CLARITY_SER_2 ser2 on ser.PROV_ID = ser2.PROV_ID\n    INNER JOIN\n        CLARITY_DEP dep on ser2.PRIMARY_DEPT_ID = dep.DEPARTMENT_ID\n    INNER JOIN\n        CLARITY_LOC loc on dep.REV_LOC_ID = loc.LOC_ID\n    INNER JOIN\n        CLARITY_EMP emp ON ser.PROV_ID = emp.PROV_ID\n    WHERE\n        dep.SPECIALTY in ('Obstetrics and Gynecology','Obstetrics')\n        --and dep.SERV_AREA_ID = 10\n    GROUP BY\n        visits.PAT_ID\n        ,ser.PROV_ID\n        ,ser.PROV_NAME \n        ,dep.DEPARTMENT_NAME\n        ,loc.LOC_NAME\n        ,lic.LICENSE_TYPE\n        ,visits.\"Pregnancy Episode ID\"\n        ,visits.\"Linked Obstetrician ID\"\n    )\n  )\n  WHERE\n    rowno = 1\n)\n/*\n,alerts as\n(\n  SELECT\n    ALT_ID\n    ,PAT_ID\n    ,PAT_CSN\n    ,BPA_LOCATOR_ID\n  FROM\n    ALERT\n  WHERE\n\t\tGENERAL_ALT_TYPE_C = 1 -- BestPractice Advisory [1]\n\t\tand BPA_LOCATOR_ID = 4021 -- BASE-DIGMED-CONNECTED MOM-ELIGIBLE PATIENT ENROLLMENT BPA [4021]\n  \n)\n*/\n\n--select count(*) from alerts;\n,eligiblity_bpas as \n\t(\n\tSELECT\n\t\t/*+MATERIALIZE  PARALLEL(6) */\n\t\talt.ALT_ID as \"ALT\"\n\t\t,alt.PAT_ID as \"EPT\"\n\t\t,alt.PAT_CSN as \"CSN\"\n\t\t,alt.BPA_LOCATOR_ID as \"Eligibility Alert ID\"\n    --,pregnancies.\"Pregnancy Episode ID\"\n    ,enc.VISIT_PROV_ID\n    ,trunc(alt2.ALT_ACTION_INST) as \"Eligibility Alert Date\"\n    ,MAX(CASE when alt2.SPEC_OVR_RSN_C  = '172' then 1 else 0 end) as \"Not Appropriate\"\n    ,MAX(CASE when alt2.SPEC_OVR_RSN_C  = '11' then 1 else 0 end) as \"Patient Refused\"\n    ,MAX(CASE when alt2.SPEC_OVR_RSN_C  = '148' then 1 else 0 end) as \"No Smartphone\"\n    ,MAX(CASE when alt2.SPEC_OVR_RSN_C  = '49' then 1 else 0 end) as \"Ask Again Later\"\n        \n    /*  \n        148\tNo Compatible SmartPhone\n        49\tNo\n        11\tPatient Refused\n        172\tNot Appropriate for Patient    \n    */\n\tFROM\n\t\tALERT alt\n    --alerts alt\n    --INNER JOIN pregnancies on alt.PAT_ID = pregnancies.\"Mother EPT\"\n \t\tLEFT JOIN ALT_HISTORY alt2 on alt.ALT_ID = alt2.ALT_ID\n\t\t--LEFT JOIN ZC_ALRT_SP_OVR_RSN reason on alt2.SPEC_OVR_RSN_C = reason.ALRT_SP_OVR_RSN_C\n    INNER JOIN PAT_ENC enc on alt.PAT_CSN = enc.PAT_ENC_CSN_ID\n\tWHERE 1 = 1\n\t\tand Alt.General_Alt_Type_C = 1 -- BestPractice Advisory [1]\n\t\tand Alt.Bpa_Locator_Id = 4021 -- BASE-DIGMED-CONNECTED MOM-ELIGIBLE PATIENT ENROLLMENT BPA [4021]\n    --If there is no delivery date, assume the pregnancy episode was over 10 months (304 days) after conseption\n    --and alt2.ALT_ACTION_INST between pregnancies.\"Date of Conception\" and NVL(pregnancies.\"Delivery Date\",(pregnancies.\"Date of Conception\" + 304))\n--and (pregnancies.\"Mother EPT\" = :EPT or :EPT is null)\n        and trunc(alt2.ALT_ACTION_INST) = trunc(enc.contact_date)\n\tGROUP BY\n\t\talt.ALT_ID\n\t\t,alt.PAT_ID\n\t\t,alt.PAT_CSN\n\t\t,alt.BPA_LOCATOR_ID\n    --,pregnancies.\"Pregnancy Episode ID\"\n    ,enc.VISIT_PROV_ID\n    ,trunc(alt2.ALT_ACTION_INST)\n\t)\n--select * from eligiblity_bpas;\n,digmed_orders_CSN as\n\t(\n\tSELECT DISTINCT\n\t\t/* MATERIALIZE */\n\t\tproc.PAT_ENC_CSN_ID as \"CSN\"\n\t\t,proc.PROC_ID as \"Enrollment Order ID\"\n    ,proc.ORDERING_DATE as \"Order Date\"\n\t\t,1 as \"Order Placed\"\n\tFROM\n\t\teligiblity_bpas\n\t\tINNER JOIN ORDER_PROC proc on eligiblity_bpas.\"CSN\" = proc.PAT_ENC_CSN_ID\n\t\t\tand proc.PROC_ID = 108795 -- DIGITAL MEDICINE - CONNECTED MOM [MYC23]\n\t)\n    \n,digmed_orders_EPS as\n\t(\n\tSELECT DISTINCT\n\t\t/* MATERIALIZE */\n\t\t--proc.PAT_ENC_CSN_ID as \"CSN\"\n        pregnancies.\"Pregnancy Episode ID\"\n\t\t,min(proc.PROC_ID) as \"Enrollment Order ID\"\n    ,min(proc.ORDERING_DATE) as \"Order Date\"\n\t\t,min(1) as \"Order Placed\"\n\tFROM\n\t\teligiblity_bpas\n\t\tINNER JOIN ORDER_PROC proc on eligiblity_bpas.\"CSN\" = proc.PAT_ENC_CSN_ID\n\t\t\tand proc.PROC_ID = 108795 -- DIGITAL MEDICINE - CONNECTED MOM [MYC23]\n        LEFT JOIN pregnancies ON eligiblity_bpas.EPT = pregnancies.\"Mother EPT\"\n        AND eligiblity_bpas.\"Eligibility Alert Date\" between trunc(pregnancies.\"Date of Conception\") and coalesce(pregnancies.\"Delivery Date\", pregnancies.\"Pregnancy Episode End\",trunc(SYSDATE - 1))\n    Group by pregnancies.\"Pregnancy Episode ID\"\n\t)\n,Digmed_orders as\n(\n  SELECT DISTINCT\n    /* MATERIALIZE */\n    pregnancies.\"Pregnancy Episode ID\"\n    ,pregnancies.\"Pregnancy Episode Start\"\n    ,pregnancies.\"Pregnancy Episode End\"\n    ,pregnancies.\"Date of Conception\"\n    ,MIN(TRUNC((enc.CONTACT_DATE - pregnancies.\"Date of Conception\")/7)) \"Enrollment Ordered at Week\"\n    ,enc.PAT_ENC_CSN_ID\n    ,proc.ORDERING_DATE as \"Enrollment Order Date\"\n    ,proc.AUTHRZING_PROV_ID as \"Enrollment Order Provider ID\"\n    ,enc.CONTACT_DATE as \"Enrollment Encounter Date\"\n    ,enc.ENC_TYPE_C as \"Enrollment Encounter Type\"\n    ,enc.DEPARTMENT_ID as \"Enrollment Encounter Department\"\n  FROM\n    pregnancies\n--    LEFT JOIN connected_mom on connected_mom.\"Pregnancy Episode ID\" = pregnancies.\"Pregnancy Episode ID\"\n--    INNER JOIN PAT_ENC enc on connected_mom.\"Patient ID\" = enc.PAT_ID\n    INNER JOIN PAT_ENC enc on pregnancies.\"Mother EPT\" = enc.PAT_ID\n    INNER JOIN ORDER_PROC proc on enc.PAT_ENC_CSN_ID = proc.PAT_ENC_CSN_ID\n      and proc.PROC_ID = 108795 -- DIGITAL MEDICINE - CONNECTED MOM [MYC23]\n  WHERE\n--    TRUNC((enc.CONTACT_DATE - pregnancies.\"Date of Conception\")/7) between 0 and 30 --We are only interested in orders from this pregnancy\n    TRUNC(enc.CONTACT_DATE) BETWEEN TRUNC(pregnancies.\"Date of Conception\") AND COALESCE( TRUNC(pregnancies.\"Delivery Date\"), TRUNC(pregnancies.\"Pregnancy Episode End\")) \n-- and pregnancies.\"Pregnancy Episode ID\" = :HSB\n  GROUP BY\n    pregnancies.\"Pregnancy Episode ID\"\n    ,pregnancies.\"Pregnancy Episode Start\"\n    ,pregnancies.\"Pregnancy Episode End\"\n    ,pregnancies.\"Date of Conception\"\n    ,enc.PAT_ENC_CSN_ID\n    ,proc.ORDERING_DATE \n    ,proc.AUTHRZING_PROV_ID\n    ,enc.CONTACT_DATE\n    ,enc.ENC_TYPE_C\n    ,enc.DEPARTMENT_ID\n)\n, selected_provider as \n(\n  SELECT\n        p.\"Mother EPT\"\n    ,   p.\"Pregnancy Episode ID\"\n    ,   p.\"Pregnancy Episode Start\"\n    ,   p.\"Pregnancy Episode End\"\n    ,   p.\"Date of Conception\"\n    ,   p.\"Linked Obstetrician ID\"\n    ,   linked_prov.\"Provider\" as \"Linked Provider\"\n    ,   linked_prov.\"Provider Primary Department\" as \"Linked Provider Department\"\n    ,   linked_prov.\"Provider Primary Location\" as \"Linked Provider Location\"\n    ,   linked_prov.\"Provider Type\" as \"Linked Provider Type\"\n    ,   linked_prov.\"Service Area\" as \"Linked Service Area\"\n    ,   ob.PROV_ID as \"Inferred Prov ID\"\n    ,   ob.\"Inferred Obstetrician\"\n    ,   ob.\"Inferred Ob Department\"\n    ,   ob.\"Inferred Ob Location\"  \n    ,   inferred_prov.\"Provider Type\" as \"Inferred Provider Type\"\n    ,   inferred_prov.\"Service Area\" as \"Inferred Service Area\"\n    ,   d.\"Enrollment Order Provider ID\"\n    ,   d.\"Enrollment Encounter Department\"\n    ,   pe.\"Encounter Department Name\"\n    ,   enroll_prov.PROV_ID as \"Enrollment Provider ID\"\n    ,   enroll_prov.\"Provider\" as \"Enrollment Provider\"\n    ,   enroll_prov.\"Provider Type\" as \"Enrollment Provider Type\"\n    ,   enroll_prov.\"Service Area\" as \"Enrollment Service Area\"\n\nFROM pregnancies p\n    LEFT JOIN most_seen_ob ob ON p.\"Pregnancy Episode ID\" = ob.\"Pregnancy Episode ID\"\n    LEFT JOIN OB_Providers inferred_prov ON ob.PROV_ID = inferred_prov.PROV_ID\n    LEFT JOIN OB_Providers linked_prov ON p.\"Linked Obstetrician ID\" = linked_prov.PROV_ID    \n    LEFT JOIN Digmed_orders d ON p.\"Pregnancy Episode ID\" = d.\"Pregnancy Episode ID\"\n    LEFT JOIN OB_Providers enroll_prov ON d.\"Enrollment Order Provider ID\" = enroll_prov.PROV_ID  \n    LEFT JOIN Prenatal_Encounters pe ON d.PAT_ENC_CSN_ID = pe.PAT_ENC_CSN_ID\n)\n    \n--select * from digmed_orders; \n,OB_Visits as\n(\n  SELECT\n    pregnancies.\"Pregnancy Episode ID\" \n    ,enc.PAT_ENC_CSN_ID as \"Pregnancy Prenatal Encounters\" \n    --,count(distinct enc.PAT_ENC_CSN_ID) as \"OB Visits\"\n  FROM\n    pregnancies\n    INNER JOIN PAT_ENC enc on pregnancies.\"Mother EPT\" = enc.PAT_ID\n      and enc.CONTACT_DATE between pregnancies.\"Date of Conception\" and nvl(pregnancies.\"Delivery Date\",trunc(SYSDATE) - 1)\n      --and enc.CONTACT_DATE <= nvl(pregnancies.\"Delivery Date\",trunc(SYSDATE) - 1)\n      and enc.ENC_TYPE_C in (1200,1201,101) -- Routine and Initial Prenatal Encounter Types\n      and enc.APPT_STATUS_C = 2 -- Completed\n      --and enc.PAT_ID = 'Z2967225'\n--and (enc.PAT_ID = :EPT or :EPT is NULL)\n  GROUP BY \n    pregnancies.\"Pregnancy Episode ID\"   \n    ,enc.PAT_ENC_CSN_ID\n    \n)\n\n, enrollment_reg as\n(\n SELECT\n      active_events.ept_id as PAT_ID\n      ,active_events.rdt_id\n      ,case when inactive_events.registry_status = 'Inactive' then 'Inactive' else 'Active' end registry_status\n      ,active_events.change_instant as start_date\n      ,MAX(inactive_events.change_instant) KEEP (DENSE_RANK FIRST ORDER BY inactive_events.change_instant ASC) as end_date\n  FROM\n  (\n    SELECT \n        REGISTRY_DATA_INFO.NETWORKED_ID as ept_id\n        ,REGISTRY_DATA_INFO.RECORD_ID as rdt_id\n        ,ZC_METRIC_STATUS.NAME as registry_status\n        ,EPIC_UTIL.EFN_UTC_TO_LOCAL(REG_DATA_HX_MEMBERSHIP.CHANGE_INSTANT_UTC_DTTM) as change_instant\n    FROM \n        REG_DATA_HX_MEMBERSHIP\n        INNER JOIN ZC_METRIC_STATUS on REG_DATA_HX_MEMBERSHIP.STATUS_C = ZC_METRIC_STATUS.METRIC_STATUS_C\n        INNER JOIN REGISTRY_DATA_INFO on REG_DATA_HX_MEMBERSHIP.RECORD_ID = REGISTRY_DATA_INFO.RECORD_ID\n    WHERE\n      REG_DATA_HX_MEMBERSHIP.REGISTRY_ID = 100237 \n  ) active_events\n  LEFT JOIN\n  (\n    SELECT \n        REGISTRY_DATA_INFO.NETWORKED_ID as ept_id\n        ,REGISTRY_DATA_INFO.RECORD_ID as rdt_id\n        ,ZC_METRIC_STATUS.NAME as registry_status\n        ,EPIC_UTIL.EFN_UTC_TO_LOCAL(REG_DATA_HX_MEMBERSHIP.CHANGE_INSTANT_UTC_DTTM) as change_instant\n    FROM \n        REG_DATA_HX_MEMBERSHIP\n        INNER JOIN ZC_METRIC_STATUS on REG_DATA_HX_MEMBERSHIP.STATUS_C = ZC_METRIC_STATUS.METRIC_STATUS_C\n        INNER JOIN REGISTRY_DATA_INFO on REG_DATA_HX_MEMBERSHIP.RECORD_ID = REGISTRY_DATA_INFO.RECORD_ID\n    WHERE\n      REG_DATA_HX_MEMBERSHIP.REGISTRY_ID = 100237 \n  ) inactive_events on inactive_events.registry_status = 'Inactive'\n      and active_events.ept_id = inactive_events.ept_id\n      and active_events.change_instant <= inactive_events.change_instant\n  WHERE\n      active_events.registry_status = 'Active'\n  GROUP BY\n      active_events.ept_id\n      ,active_events.rdt_id\n      ,case when inactive_events.registry_status = 'Inactive' then 'Inactive' else 'Active' end \n      ,active_events.change_instant\n)\n\n\n--select * from ob_visits;\n,OB_Patients as\n(\n  /*\n  This CTE returns one line for each patient who had an eligibility BPA fire during a visit with \"their\" OB (Linked or Most Seen).\n  Included is patient MRN, name,visit provider ID, whether the provider responded \n  to the enrollment offer BPA with any of the four valid responses,\n  a concatenation of all the responses, an \"Order Rate\" and a \"Response Rate\" (these last two have a value of 0 or 1),\n  the number of OB visits where an elgiblity BPA fired, the number of visits where an offer to participate was extended\n  and the number of OB visits during the patient's elgibility period (week 10 to 20).\n  The names were intended to make the Tableau workbook easier to understand (for the developer).\n  A previous version of the dashboard used all the BPA response columns but the current workbook only uses\n  \"Response Rate\"\n  */\n  SELECT /* MATERIALIZE PARALLEL(6) */\n    pt.PAT_MRN_ID as \"MRN\"\n    ,pt.PAT_ID\n    ,pt.PAT_NAME as \"Patient Name\"\n    ,pregnancies.\"Pregnancy Episode ID\"\n    ,pregnancies.\"Pregnancy Episode Start\"\n    ,pregnancies.\"Pregnancy Episode End\"\n    ,pregnancies.\"Linked Obstetrician ID\"\n    ,most_seen_ob.\"Visits with this OB\"\n    ,sp.\"Enrollment Provider ID\"\n    --If the episode has a provider on the enrollment order, use them, else use the linked OB.  Otherwise use the most seen OB.\n    --,case when pregnancies.\"Linked Obstetrician ID\" is not NULL then pregnancies.\"Linked Obstetrician ID\" else most_seen_ob.PROV_ID end PROV_ID\n    ,coalesce(sp.\"Enrollment Provider ID\",pregnancies.\"Linked Obstetrician ID\",most_seen_ob.PROV_ID) as PROV_ID\n    --,min(enc.CONTACT_DATE)  as \"1st Appt\"\n    ,enc.CONTACT_DATE  as Appt_Date\n    ,pregnancies.\"Date of Conception\"\n    ,pregnancies.\"Delivery Date\"\n    ,enc.PAT_ENC_CSN_ID as CSN\n    ,enctype.name as encounter_type\n    ,eligiblity_bpas.\"Not Appropriate\" as \"Not Appropriate\"\n    ,eligiblity_bpas.\"Patient Refused\" as \"Patient Refused\"\n    ,eligiblity_bpas.\"No Smartphone\" as \"No Smartphone\"\n    ,eligiblity_bpas.\"Ask Again Later\" as \"Ask Again Later\"\n    ,eligiblity_bpas.\"Eligibility Alert Date\"\n    --,max(eligiblity_bpas.\"Alert Response (Last)\") as \"Alert Response (Last)\"\n    --,max(eligiblity_bpas.\"Alert Response (All)\") as \"Alert Response (All)\"\n    ,NVL(Digmed_Orders_CSN.\"Order Placed\", 0) as \"Order Placed CSN\"\n    ,NVL(Digmed_Orders_EPS.\"Order Placed\", 0) as \"Order Placed Episode\"\n    /*,max( CASE\n            when digmed_orders.\"Order Placed\" = 1 then 1\n            when \"Not Appropriate\" = 1 then 1\n            when \"Patient Refused\" = 1 then 1\n            when \"No Smartphone\" = 1 then 1\n            else 0 \n          end\n        )  as \"Responses\"\n    */\n    , enc.PAT_ENC_CSN_ID \"Visits where BPA fired\" \n    ,CASE\n            when Digmed_Orders_CSN.\"Order Placed\" = 1 \n              or \"Not Appropriate\" = 1 \n              or \"Patient Refused\" = 1 \n              or \"No Smartphone\" = 1 then 1\n            else 0 \n          end\n         \"Visits where offer was made\" \n    ,case \n            when TRUNC((enc.CONTACT_DATE - pregnancies.\"Date of Conception\")/7) between 10 and 20\n            then 1 \n            else 0 \n         end \n         \"Visits during eligibility\"\n    ,en_reg.registry_status\n    ,en_reg.start_date\n    ,en_reg.end_date\n  FROM\n    eligiblity_bpas\n    --I'm assuming the BPA won't fire if the patient is not pregnant\n    --INNER JOIN pregnancies on eligiblity_bpas.\"Pregnancy Episode ID\" = pregnancies.\"Pregnancy Episode ID\"\n    INNER JOIN pregnancies on eligiblity_bpas.EPT = pregnancies.\"Mother EPT\"\n    INNER JOIN programs on eligiblity_bpas.\"Eligibility Alert ID\" = programs.\"Eligibility Alert ID\"\n    INNER JOIN PAT_ENC enc on eligiblity_bpas.\"CSN\" = enc.PAT_ENC_CSN_ID\n    INNER  JOIN ZC_DISP_ENC_TYPE       enctype   ON enc.ENC_TYPE_C            = enctype.DISP_ENC_TYPE_C \n    INNER JOIN PATIENT pt on enc.PAT_ID = pt.PAT_ID\n    INNER JOIN CLARITY_DEP dep on enc.DEPARTMENT_ID = dep.DEPARTMENT_ID\n    INNER JOIN CLARITY_SER ser on enc.VISIT_PROV_ID = ser.PROV_ID\n    --Only include patients who are seeing an OB?\n    LEFT JOIN most_seen_ob on pregnancies.\"Pregnancy Episode ID\" = most_seen_ob.\"Pregnancy Episode ID\" \n    --INNER JOIN CLARITY_EMP emp on most_seen_ob.PROV_ID = emp.PROV_ID\n    INNER JOIN ZC_DISP_ENC_TYPE enc_type on enc.ENC_TYPE_C = enc_type.DISP_ENC_TYPE_C\n    Left Join Digmed_Orders_CSN On Eligiblity_Bpas.\"CSN\" = Digmed_Orders_CSN.\"CSN\"\n    Left Join Digmed_Orders_EPS On pregnancies.\"Pregnancy Episode ID\" = Digmed_Orders_EPS.\"Pregnancy Episode ID\"\n    --LEFT JOIN X_EMP_DIGMED_ENROLL_PROG x_emp on emp.USER_ID = x_emp.USER_NUMBER_ID and x_emp.DM_PROGRAMS_C = 3 --Redundant with ob_providers CTE\n    Left Join enrollment_reg en_reg on en_reg.PAT_ID = eligiblity_bpas.EPT \n        and (trunc(en_reg.START_DATE) between trunc(pregnancies.\"Pregnancy Episode Start\")\n        and  nvl(pregnancies.\"Pregnancy Episode End\",trunc(SYSDATE - 1)))\n    Left Join selected_provider sp ON pregnancies.\"Pregnancy Episode ID\" = sp.\"Pregnancy Episode ID\"\n\n    WHERE 1 = 1\n    and ser.STAFF_RESOURCE_C = 1 -- Person [1]\n    and enc.ENC_TYPE_C in (1200,1201,101) \n    --We are only interested in the the BPAs that happened when they were seeing \"their\" (linked or most seen) OB\n    \n    --BRODIE UPDATE\n    --and eligiblity_bpas.VISIT_PROV_ID = coalesce(pregnancies.\"Linked Obstetrician ID\",most_seen_ob.PROV_ID)\n    \n    --That happened during this pregnancy episode\n    and eligiblity_bpas.\"Eligibility Alert Date\" between trunc(pregnancies.\"Date of Conception\") and coalesce(pregnancies.\"Delivery Date\", pregnancies.\"Pregnancy Episode End\",trunc(SYSDATE - 1))\n    --and ser.STAFF_RESOURCE_C = 1 -- Person [1]\n    --    and enc.CONTACT_DATE >= trunc(SYSDATE) - 365  --This query won't complete for longer periods\n    --and (pregnancies.\"Mother EPT\" = :EPT or :EPT is null)\n    --and pt.PAT_MRN_ID = :MRN\n  /*\n  GROUP BY\n    pt.PAT_MRN_ID\n    ,pt.PAT_ID\n    ,pt.PAT_NAME\n    ,pregnancies.\"Pregnancy Episode ID\"\n    ,pregnancies.\"Pregnancy Episode Start\"\n    ,pregnancies.\"Pregnancy Episode End\"\n    ,pregnancies.\"Linked Obstetrician ID\"\n    ,most_seen_ob.\"Visits with this OB\"\n    ,coalesce(pregnancies.\"Linked Obstetrician ID\",most_seen_ob.PROV_ID)\n    ,pregnancies.\"Date of Conception\"\n    ,pregnancies.\"Delivery Date\"\n    ,enc.CONTACT_DATE\n    ,eligiblity_bpas.\"CSN\"\n    ,enctype.name\n    */\n)\n\n--select * from ob_patients;\n--select count(*) from ob_patients; --12,080 distinct MRN\nSELECT distinct \n  OB_Providers.\"Provider\"\n  ,OB_Providers.\"Provider Type\"\n  --,OB_Providers.PROV_ID\n  ,OB_Providers.\"Provider Primary Department\"\n  ,OB_Providers.\"Provider Cost Center\"\n  ,OB_Providers.\"Provider Primary Location\"\n  ,OB_Providers.\"Participating\"\n  --,case when most_seen_ob.\"Linked Obstetrician ID\" is NULL then 'Y' else 'N' end \"Patient's Inferred OB\"\n  ,case when OB_Patients.PROV_ID <> OB_Patients.\"Enrollment Provider ID\" \n      THEN CASE WHEN OB_Patients.\"Linked Obstetrician ID\" <> OB_Patients.PROV_ID then 'Y' else 'N' end END \"Patient's Inferred OB\"\n  ,OB_Patients.PAT_ID\n  ,OB_Patients.MRN\n  ,OB_Patients.CSN\n  ,OB_Patients.\"Eligibility Alert Date\"\n  ,OB_Patients.encounter_type\n  ,OB_Patients.\"Patient Name\"\n  ,OB_Patients.PROV_ID\n  ,OB_Patients.\"Linked Obstetrician ID\"\n  ,OB_Patients.\"Enrollment Provider ID\"\n  --,OB_Patients.\"1st Appt\"\n  ,OB_Patients.Appt_Date\n  ,OB_Patients.\"Not Appropriate\"\n  ,OB_Patients.\"Patient Refused\"\n  ,OB_Patients.\"No Smartphone\"\n  ,OB_Patients.\"Ask Again Later\"\n  --,OB_Patients.\"Alert Response (Last)\"\n  --,OB_Patients.\"Alert Response (All)\" \n  ,OB_Patients.\"Order Placed CSN\"\n  ,OB_Patients.\"Order Placed Episode\"\n  --,OB_Patients.\"Responses\"\n  ,OB_patients.\"Visits where BPA fired\"\n  ,OB_patients.\"Visits where offer was made\"\n  ,OB_patients.\"Visits during eligibility\"\n  ,OB_patients.\"Pregnancy Episode ID\"\n  ,OB_patients.\"Pregnancy Episode Start\"\n  ,OB_patients.\"Pregnancy Episode End\"\n  ,OB_patients.start_date as registry_enroll_date\n  ,OB_patients.end_date as registry_unenroll_date\n  ,OB_patients.\"Visits with this OB\"\n  --,OB_Visits.\"OB Visits\"\n  ,trunc(OB_patients.\"Date of Conception\") as \"Date of Conception\"\n  ,trunc(OB_patients.\"Delivery Date\") as \"Delivery Date\"\n  ,OB_patients.registry_status\nFROM\n    OB_Patients\n  LEFT JOIN OB_Providers on OB_Providers.PROV_ID = OB_Patients.PROV_ID\n  --LEFT JOIN most_seen_ob on OB_Patients.\"Pregnancy Episode ID\" = most_seen_ob.\"Pregnancy Episode ID\"\n  --Full Outer JOIN OB_Visits on OB_Patients.\"Pregnancy Episode ID\" = OB_Visits.\"Pregnancy Episode ID\"\n  --and OB_Patients.CSN  =  OB_Visits.\"Pregnancy Prenatal Encounters\"",
        "downstreamDatasources": [],
        "downstreamWorkbooks": [
            {
                "luid": "1c6ba5ab-0f1d-4f73-a500-d936bb60184e",
                "name": "Connected MOM - Offer Rates by Provider",
                "projectName": "Connected MOM PROD"
            }
        ]
    },
        {
        "id": "ffe76824-bccd-f3b0-07b1-3de58b4e4703",
        "name": "Check in Users",
        "query": "select users.user_logon_id\r\n,emp.active_directory_id\r\n,emp.job_title\r\n,emp.current_employee_status\r\nfrom analytics.employees@nexus emp\r\ninner join analytics.users@nexus\r\non emp.employee_id = users.employee_id\r\nwhere users.user_source = 'EPIC'",
        "downstreamDatasources": [],
        "downstreamWorkbooks": []
    },
    {
        "id": "fff4a70b-23e4-608c-8439-c7415f787674",
        "name": "Custom SQL Query",
        "query": "Select *\nFROM analytics_app.pc_fc_tbl",
        "downstreamDatasources": [
            {
                "luid": "6a85121a-c400-462d-8ea4-89e3f88d9a7e",
                "name": "PB_Finance_Council_Util_Summary",
                "projectName": "Revenue Cycle Analytics PROD"
            }
        ],
        "downstreamWorkbooks": [
            {
                "luid": "2dacecfe-044a-422b-94cb-3e499b9f08da",
                "name": "FCDashboard_PB_AdditionalInsights",
                "projectName": "RCA Internal Use DEV"
            },
            {
                "luid": "86dbdead-8f39-4d4b-b8aa-f199e90b5d16",
                "name": "FinanceCouncilDashboard_PB draft ",
                "projectName": "Revenue Cycle Analytics DEV"
            },
            {
                "luid": "a0f5bc2d-70f9-4e71-b6bb-9c8433f55db9",
                "name": "PB FC Validation",
                "projectName": "RCA Internal Use DEV"
            },
            {
                "luid": "b39e51c9-77e5-479f-abf7-484696a7419b",
                "name": "FinanceCouncilDashboard_PB",
                "projectName": "Revenue Cycle Analytics PROD"
            }
        ]
    }
]